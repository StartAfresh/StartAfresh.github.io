<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JavaScript</title>
      <link href="/2023/09/15/JavaScript/"/>
      <url>/2023/09/15/JavaScript/</url>
      
        <content type="html"><![CDATA[<h2 id="JS-进阶"><a href="#JS-进阶" class="headerlink" title="JS 进阶"></a>JS 进阶</h2><h3 id="一、作用域"><a href="#一、作用域" class="headerlink" title="一、作用域"></a>一、作用域</h3><blockquote><p>规定变量能够访问的范围</p></blockquote><h4 id="1-1-局部作用域"><a href="#1-1-局部作用域" class="headerlink" title="1.1 局部作用域"></a>1.1 局部作用域</h4><ul><li>函数作用域<ul><li>在函数内部声明的变量只能在函数内部被访问，外部无法直接访问</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="comment">// 声明 counter 函数</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">counter</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">    <span class="comment">// 函数内部声明的变量</span></span><br><span class="line">    <span class="keyword">const</span> s = x + y</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(s) <span class="comment">// 18</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 设用 counter 函数</span></span><br><span class="line">  <span class="title function_">counter</span>(<span class="number">10</span>, <span class="number">8</span>)</span><br><span class="line">  <span class="comment">// 访问变量 s</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(s)<span class="comment">// 报错</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>块作用域<ul><li>在 JavaScript 中使用 {} 包裹的代码称为代码块，代码块内部声明的变量外部将【有可能】无法被访问。</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// age 只能在该代码块中被访问</span></span><br><span class="line">    <span class="keyword">let</span> age = <span class="number">18</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(age); <span class="comment">// 正常</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 超出了 age 的作用域</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(age) <span class="comment">// 报错</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> flag = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">if</span>(flag) &#123;</span><br><span class="line">    <span class="comment">// str 只能在该代码块中被访问</span></span><br><span class="line">    <span class="keyword">let</span> str = <span class="string">&#x27;hello world!&#x27;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(str); <span class="comment">// 正常</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 超出了 age 的作用域</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(str); <span class="comment">// 报错</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> t = <span class="number">1</span>; t &lt;= <span class="number">6</span>; t++) &#123;</span><br><span class="line">    <span class="comment">// t 只能在该代码块中被访问</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(t); <span class="comment">// 正常</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 超出了 t 的作用域</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(t); <span class="comment">// 报错</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>总结：</p><ol><li><code>let</code> 声明的变量会产生块作用域，<code>var</code> 不会产生块作用域</li><li><code>const</code> 声明的常量也会产生块作用域</li><li>不同代码块之间的变量无法互相访问</li><li>推荐使用 <code>let</code> 或 <code>const</code></li></ol><p>的发射点发射点 ass 答复 asdfa 的 as 的</p><p>的首发式地方<br>sdf 阿斯顿阿斯蒂芬 asdfs 答复</p><h4 id="1-2-全局作用域"><a href="#1-2-全局作用域" class="headerlink" title="1.2 全局作用域"></a>1.2 全局作用域</h4><script> 标签和 .js 文件的【最外层】就是所谓的全局作用域，在此声明的变量在函数内部也可以被访问。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="comment">// 此处是全局</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 此处为局部</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 此处为全局</span></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="string">``</span><span class="string">``</span></span><br><span class="line">#### <span class="number">1.3</span>作用域链</span><br><span class="line">&gt; 作用域链本质上是底层的变量查找机制。</span><br><span class="line">&gt; 在函数被执行时，我优先查找当前函数作用域中的变量，如果当前作用域查找不到，则会一次查找父级作用域直到全局作用域</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### <span class="number">1.4</span>垃圾回收机制简称<span class="variable constant_">GC</span></span><br><span class="line"><span class="variable constant_">JS</span>中内存的分配和回收都是自动完成的，内存在不使用的时候会被垃圾回收器自动回收。</span><br><span class="line">##### <span class="number">1.4</span><span class="number">.1</span>内存泄漏</span><br><span class="line">不在用到的内存，没有及时释放，就叫内存泄漏</span><br><span class="line">注意</span><br><span class="line"></span><br><span class="line">- 全局变量一般不会回收(关闭页面回收)；</span><br><span class="line">- 一般情况下局部变量的值, 不用了, 会被自动回收掉</span><br><span class="line">#### <span class="number">1.5</span>闭包</span><br><span class="line">&gt; 内层函数 + 外层函数的变量 = 闭包</span><br><span class="line"></span><br><span class="line">![image.<span class="property">png</span>](<span class="attr">https</span>:<span class="comment">//cdn.nlark.com/yuque/0/2022/png/29072358/1671004305398-8077c048-b051-48e7-8b59-38ad48a1e224.png#averageHue=%23faf9f8&amp;clientId=u89f1804d-b76d-4&amp;from=paste&amp;height=86&amp;id=ud889d43d&amp;originHeight=118&amp;originWidth=309&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=4526&amp;status=done&amp;style=none&amp;taskId=ua6bf8d65-b3ad-443e-91a0-9cfcf29b2bd&amp;title=&amp;width=224.72727272727272)</span></span><br><span class="line"><span class="string">``</span><span class="string">`javascript</span></span><br><span class="line"><span class="string">      function outer() &#123;</span></span><br><span class="line"><span class="string">        let a = 0;</span></span><br><span class="line"><span class="string">        function fn() &#123;</span></span><br><span class="line"><span class="string">          console.log(a);</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        return fn</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    let fn1 = outer()</span></span><br><span class="line"><span class="string">    fn1()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">闭包的作用</span></span><br><span class="line"><span class="string">封闭数据，实现数据私有，外部也可以访问函数内部的变量</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>javascript</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">count</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> i = <span class="number">0</span></span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">        i++</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`函数被调用了<span class="subst">$&#123;i&#125;</span>次`</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> fn</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//闭包可能导致的问题：</span></span><br><span class="line">因为在全局作用域下，变量能找到返回的函数，然后访问变量，无法被销毁，所以导致了内存泄漏</span><br><span class="line">    <span class="keyword">const</span> fun = <span class="title function_">count</span>()</span><br></pre></td></tr></table></figure>#### 1.6 变量提升变量提升是 JavaScript 中比较“奇怪”的现象，它允许在变量声明之前即被访问，<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="comment">// 访问变量 str console.log(str + &#x27;world!&#x27;); // 声明变量 str var str = &#x27;hello</span></span><br><span class="line">  <span class="string">&#x27;;</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure>### 二、函数#### 2.1 函数提升> 函数提升与变量提升比较类似，是指函数在声明之前即可被调用。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="comment">// 调用函数 foo() // 声明函数 function foo()&#123;&quot; &quot;&#125;</span></span><br><span class="line">  &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;声明之前即被调用...&quot;</span>)&#125;</span><br><span class="line">  <span class="comment">// 不存在提升现象 bar() // 错误 var bar = function () &#123;console.log(</span></span><br><span class="line">    <span class="string">&quot;函数表达式不存在提升现象...&quot;</span></span><br><span class="line">  )&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>#### 2.2 函数参数函数参数的使用细节，能够提升函数应用的灵活度。##### 2.2.1 默认值<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 设置参数默认值</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">sayHi</span>(<span class="params">name = <span class="string">&quot;小明&quot;</span>, age = <span class="number">18</span></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">`&lt;p&gt;大家好，我叫<span class="subst">$&#123;name&#125;</span>，我今年<span class="subst">$&#123;age&#125;</span>岁了。&lt;/p&gt;`</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 调用函数</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">sayHi</span>();</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">sayHi</span>(<span class="string">&quot;小红&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">sayHi</span>(<span class="string">&quot;小刚&quot;</span>, <span class="number">21</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>##### 2.2.2 动态参数`arguments` 是函数内部内置的伪数组变量，它包含了调用函数时传入的所有实参。<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 求生函数，计算所有参数的和</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(arguments)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> s = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">arguments</span>.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">      s += <span class="variable language_">arguments</span>[i];</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(s);</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 调用求和函数</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">sum</span>(<span class="number">5</span>, <span class="number">10</span>); <span class="comment">// 两个参数</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>); <span class="comment">// 两个参数</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>总结：1. `arguments` 是一个伪数组(无法使用数组的方法)2. `arguments` 的作用是动态获取函数的实参##### 2.2.3 剩余参数> 剩余参数允许我们将一个不定数量的参数表示为一个数组<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">config</span>(<span class="params">baseURL, ...other</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(baseURL) <span class="comment">// 得到 &#x27;http://baidu.com&#x27;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(other)  <span class="comment">// other  得到 [&#x27;get&#x27;, &#x27;json&#x27;]</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 调用函数</span></span><br><span class="line">  <span class="title function_">config</span>(<span class="string">&#x27;http://baidu.com&#x27;</span>, <span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;json&#x27;</span>);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>总结：1. `...` 是语法符号，置于最末函数形参之前，用于获取多余的实参2. 借助 `...` 获取的剩余实参，是个真数组##### 2.2.4 扩 展：展开运算符<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">const</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] <span class="comment">// 展开运算符，可以展开数组，不会修改原数组 //</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(...arr); <span class="comment">// 1.求数组最大值 // console.log(Math.max(1,2,3)); //</span></span><br><span class="line">  ...arr1 === <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">max</span>(...arr1)); <span class="comment">//3 // 2.合并数组 const arr2</span></span><br><span class="line">  = [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>] <span class="keyword">const</span> arr = [...arr1,...arr2]</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>![image.png](https://cdn.nlark.com/yuque/0/2022/png/29072358/1671007124223-a55bc438-1401-4b13-a72a-09f68f09bebf.png#averageHue=%23d0cfd2&clientId=u89f1804d-b76d-4&from=paste&height=295&id=uaf69d253&originHeight=405&originWidth=1075&originalType=binary&ratio=1&rotation=0&showTitle=false&size=128156&status=done&style=none&taskId=u6eab99c6-4a6c-447b-a3b6-c8337c05759&title=&width=781.8181818181819)#### 2.3 箭头函数##### 2.3.1 基本语法箭头函数是一种声明函数的简洁语法，它与普通函数并无本质的区别，差异性更多体现在语法格式上。<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 箭头函数</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> <span class="title function_">foo</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;^_^ 长相奇怪的函数...&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 调用函数</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">foo</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 更简洁的语法</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> form = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;form&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">  form.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function">(<span class="params">ev</span>) =&gt;</span> ev.<span class="title function_">preventDefault</span>());</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>总结：1. 箭头函数属于表达式函数，因此不存在函数提升2. 箭头函数只有一个参数时可以省略圆括号 `()`3. 箭头函数函数体只有一行代码时可以省略花括号 `{}`，并自动做为返回值被返回4. 箭头函数可以直接返回一个对象 const fn = (unname) => ({uname:uname})5. 箭头函数中没有 `arguments`，只能使用 `...` 动态获取实参##### 2.3.2 箭头函数的 this> 箭头函数的 this 是上一层作用域的 this 指向<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">uname</span>: <span class="string">&quot;pink老师&quot;</span>,</span><br><span class="line">  <span class="attr">sayHi</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// obj</span></span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">count</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// obj</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="title function_">count</span>();</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">obj.<span class="title function_">sayHi</span>();</span><br></pre></td></tr></table></figure>### 三、解构赋值#### 3.1 数组解构> 数组解构可以将数组里的元素，批量赋值给若干个变量<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] <span class="keyword">const</span> [max,min,avg] = arr; <span class="variable language_">console</span>.<span class="title function_">log</span>(max); <span class="comment">//1 let a = 1</span></span><br><span class="line">  <span class="keyword">let</span> b = <span class="number">2</span>; [b,a] = [a,b]</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>![image.png](https://cdn.nlark.com/yuque/0/2022/png/29072358/1671009027284-cfb5a47c-e534-4aaf-b1cb-9645ac9e979e.png#averageHue=%23bfc1b9&clientId=u89f1804d-b76d-4&from=paste&height=340&id=u67aed7e9&originHeight=468&originWidth=1355&originalType=binary&ratio=1&rotation=0&showTitle=false&size=126101&status=done&style=none&taskId=u300ccb5f-d063-455a-ae00-d3cd1be5656&title=&width=985.4545454545455)![image.png](https://cdn.nlark.com/yuque/0/2022/png/29072358/1671009258007-4711b35b-86a8-4d20-a487-55cc4b469ce8.png#averageHue=%233c3f4c&clientId=u89f1804d-b76d-4&from=paste&height=101&id=u91e1f364&originHeight=139&originWidth=702&originalType=binary&ratio=1&rotation=0&showTitle=false&size=78603&status=done&style=none&taskId=ua687d323-1995-42de-bf1a-d52341c4ec6&title=&width=510.54545454545456)1. 变量的数量大于单元值数量时，多余的变量将被赋值为？<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [a,b,c,e] = [<span class="number">1</span>,<span class="number">2</span>] <span class="literal">undefined</span></span><br></pre></td></tr></table></figure>2. 按需导入，忽略某些返回值：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [a,b,,e] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>] e = <span class="number">4</span></span><br></pre></td></tr></table></figure>3. 变量的数量小于单元值数量时，可以通过什么剩余获取所有的值？<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [a,b,...tel] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]  剩余参数... 获取剩余单元值，但只能置于最末位</span><br></pre></td></tr></table></figure>4.  防止有 undefined 传递单元值的情况，可以设置默认值：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [a = <span class="string">&quot;手机&quot;</span>, b = <span class="string">&quot;华为&quot;</span>] = [<span class="string">&quot;小米&quot;</span>]; <span class="comment">//a = 小米 b = 华为</span></span><br></pre></td></tr></table></figure>##### 3.1.1 多维数组结构<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>]];</span><br><span class="line"><span class="keyword">let</span> [a, b, [c, d]] = arr;</span><br></pre></td></tr></table></figure>#### 3.2 对象解构> 对象解构式将对象属性和方法批量赋值给若干个变量<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="comment">//属性名与变量名要相同</span></span><br><span class="line">  <span class="keyword">const</span> &#123; name, age &#125; = &#123; <span class="attr">name</span>: <span class="string">&quot;wyj&quot;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;;</span><br><span class="line"><span class="comment">//对象解构变量名，可以重新改名  旧变量名：新变量名</span></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="attr">name</span>:uname, age &#125; = &#123; <span class="attr">name</span>: <span class="string">&quot;wyj&quot;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(name, age);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>##### 3.2.1 数组对象解构<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> pig = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">uname</span>: <span class="string">&quot;佩奇&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"><span class="keyword">const</span> [&#123; uname, age &#125;] = pig;</span><br></pre></td></tr></table></figure>##### 3.2.2 多级对象解构<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 多级对象解构</span></span><br><span class="line"><span class="keyword">const</span> pig = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;佩奇&quot;</span>,</span><br><span class="line">  <span class="attr">family</span>: &#123;</span><br><span class="line">    <span class="attr">mother</span>: <span class="string">&quot;猪妈妈&quot;</span>,</span><br><span class="line">    <span class="attr">father</span>: <span class="string">&quot;猪爸爸&quot;</span>,</span><br><span class="line">    <span class="attr">sister</span>: <span class="string">&quot;乔治&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">6</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> &#123;</span><br><span class="line">  name,</span><br><span class="line">  <span class="attr">family</span>: &#123; mother, father, sister &#125;,</span><br><span class="line">&#125; = pig;</span><br><span class="line"><span class="comment">//数组对象解构</span></span><br><span class="line"><span class="keyword">const</span> person = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;佩奇&quot;</span>,</span><br><span class="line">    <span class="attr">family</span>: &#123;</span><br><span class="line">      <span class="attr">mother</span>: <span class="string">&quot;猪妈妈&quot;</span>,</span><br><span class="line">      <span class="attr">father</span>: <span class="string">&quot;猪爸爸&quot;</span>,</span><br><span class="line">      <span class="attr">sister</span>: <span class="string">&quot;乔治&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">6</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"><span class="keyword">const</span> [</span><br><span class="line">  &#123;</span><br><span class="line">    name,</span><br><span class="line">    <span class="attr">family</span>: &#123; mother, father, sister &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">] = person;</span><br></pre></td></tr></table></figure>### 四、深入对象> 了解面向对象的基础概念，能够利用构造函数创建对象。##### 4.1 构造函数> 构造函数是专门用于创建对象的函数，如果一个函数使用 new 关键字调用，那么这个函数就是构造函数。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="comment">// 定义函数,首字母要大写</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">Foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;通过 new 也能调用函数...&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 调用函数</span></span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Foo</span>();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>1. 使用 `new` 关键字调用函数的行为被称为实例化2. 实例化构造函数时没有参数时可以省略 `()`3. 构造函数的返回值即为新创建的对象4. 构造函数内部的 `return` 返回的值无效！##### 4.1.1 实例成员> 通过构造函数创建的对象称为实例对象，实例对象中的属性和方法称为实例成员。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="comment">// 构造函数</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 构造函数内部的 this 就是实例对象</span></span><br><span class="line">    <span class="comment">// 实例对象中动态添加属性</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;小明&#x27;</span></span><br><span class="line">    <span class="comment">// 实例对象动态添加方法</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">sayHi</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;大家好~&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 实例化，p1 是实例对象</span></span><br><span class="line">  <span class="comment">// p1 实际就是 构造函数内部的 this</span></span><br><span class="line">  <span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(p1)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="property">name</span>) <span class="comment">// 访问实例属性</span></span><br><span class="line">  p1.<span class="title function_">sayHi</span>() <span class="comment">// 调用实例方法</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>1. 构造函数内部 `this` 实际上就是实例对象，为其动态添加的属性和方法即为实例成员2. 为构造函数传入参数，动态创建结构相同但值不同的对象注：构造函数创建的实例对象彼此独立互不影响。##### 4.1.2 静态成员> 在 JavaScript 中底层函数本质上也是对象类型，因此允许直接为函数动态添加属性或方法，构造函数的属性和方法被称为静态成员。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="comment">// 构造函数</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="comment">// 省略实例成员</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 静态属性</span></span><br><span class="line">  <span class="title class_">Person</span>.<span class="property">eyes</span> = <span class="number">2</span></span><br><span class="line">  <span class="title class_">Person</span>.<span class="property">arms</span> = <span class="number">2</span></span><br><span class="line">  <span class="comment">// 静态方法</span></span><br><span class="line">  <span class="title class_">Person</span>.<span class="property">walk</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;^_^人都会走路...&#x27;</span>)</span><br><span class="line">    <span class="comment">// this 指向 Person</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">eyes</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>1. 静态成员指的是添加到构造函数本身的属性和方法2. 一般公共特征的属性或方法静态成员设置为静态成员3. 静态成员方法中的 `this` 指向构造函数本身### 五、内置构造函数> 在 JavaScript 中最主要的数据类型有 6 种，分别是字符串、数值、布尔、undefined、null 和 对象，常见的对象类型数据包括数组和普通对象。其中字符串、数值、布尔、undefined、null 也被称为简单类型或基础类型，对象也被称为引用类型。> 在 JavaScript 内置了一些构造函数，绝大部的数据处理都是基于这些构造函数实现的#### 5.1 引用类型Object1. 推荐使用字面量方式声明对象，而不是 `Object` 构造函数2. `Object.assign` 静态方法创建新的对象3. `Object.keys` 静态方法获取对象中所有属性 返回一个数组4. `Object.values` 表态方法获取对象中所有属性值 返回一个数组Array> 内置的构造函数，用于创建数组forEach> 遍历数组（适合遍历数组对象） 只遍历没有返回值<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="comment">//item当前数组元素，index当前数组索引号</span></span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">item, index</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(index);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>filter> 筛选数组符合条件的元素，并返回筛选之后元素的新数组<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> &lt;script&gt;</span><br><span class="line">   <span class="keyword">const</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>];</span><br><span class="line"><span class="comment">//item当前数组元素，index当前数组索引号</span></span><br><span class="line">   <span class="keyword">const</span> result = arr.<span class="title function_">filter</span>(<span class="keyword">function</span> (<span class="params">item, index</span>) &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(index);</span><br><span class="line">     <span class="comment">// return item + 20 无效</span></span><br><span class="line">     <span class="keyword">return</span> item &gt;= <span class="number">20</span>;</span><br><span class="line">     或者 arr.<span class="title function_">filter</span>(item = &gt; item &gt;= <span class="number">20</span>)</span><br><span class="line">   &#125;);</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line"> &lt;/script&gt;</span><br></pre></td></tr></table></figure>map> 根据当前数组生成一个新的数组，非破坏性方法：不会影响原数组<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="keyword">let</span> result = arr.<span class="title function_">map</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item * <span class="number">2</span>);</span><br></pre></td></tr></table></figure>reduce作用：reduce 返回函数累计处理的结果，经常用于求和等:::info基本语法：arr.reduce(function(累计值，当前元素【,索引号】【,原数组】){},起始值):::参数：起始值可以省略，如果写就作为第一次累计的起始值<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">arr.<span class="title function_">reduce</span>(<span class="keyword">function</span> (<span class="params">prev, item</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> prev + item;</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"><span class="comment">//简写</span></span><br><span class="line"><span class="keyword">const</span> re = arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev, item</span>) =&gt;</span> prev + item);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(re);</span><br></pre></td></tr></table></figure>find> **find()** 方法返回数组中满足提供的测试函数的第一个元素的值。否则返回 [undefined](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined)。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;小米&quot;</span>,</span><br><span class="line">    <span class="attr">price</span>: <span class="number">1999</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;华为&quot;</span>,</span><br><span class="line">    <span class="attr">price</span>: <span class="number">3999</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"><span class="keyword">const</span> mi = arr.<span class="title function_">find</span>(<span class="keyword">function</span> (<span class="params">item</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> item.<span class="property">name</span> === <span class="string">&quot;小米&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mi);</span><br></pre></td></tr></table></figure>every> **every()** 方法测试一个数组内的所有元素是否都能通过某个指定函数的测试。它返回一个布尔值。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isBigEnough</span>(<span class="params">element, index, array</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> element &gt;= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line">[<span class="number">12</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">130</span>, <span class="number">44</span>].<span class="title function_">every</span>(isBigEnough); <span class="comment">// false</span></span><br><span class="line">[<span class="number">12</span>, <span class="number">54</span>, <span class="number">18</span>, <span class="number">130</span>, <span class="number">44</span>].<span class="title function_">every</span>(isBigEnough); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>from> 伪数组转换为真数组<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="string">&quot;foo&quot;</span>));</span><br></pre></td></tr></table></figure>总结：1.  推荐使用字面量方式声明数组，而不是 `Array` 构造函数2.  实例方法 `forEach` 用于遍历数组，替代 `for` 循环 (重点)3.  实例方法 `filter` 过滤数组单元值，生成新数组(重点)4.  实例方法 `map` 迭代原数组，生成新数组(重点)5.  实例方法 `join` 数组元素拼接为字符串，返回字符串(重点)6.  实例方法  `find`   查找元素， 返回符合测试条件的第一个数组元素值，如果没有符合条件的则返回 undefined(重点)7.  实例方法`every` 检测数组所有元素是否都符合指定条件，如果**所有元素**都通过检测返回 true，否则返回 false(重点)8.  实例方法`some` 检测数组中的元素是否满足指定条件   **如果数组中有**元素满足条件返回 true，否则返回 false9.  实例方法 `concat`   合并两个数组，返回生成新数组10. 实例方法 `sort` 对原数组单元值排序11. 实例方法 `splice` 删除或替换原数组单元12. 实例方法 `reverse` 反转数组13. 实例方法 `findIndex`   查找元素的索引值#### 5.2 包装类型> 之所以具有对象特征的原因是字符串、数值、布尔类型数据是 JavaScript 底层使用 Object 构造函数“包装”来的，被称为包装类型。Stringsplit> 把字符串 转换为 数组   和 join() 相反> split 方法使用指定的分隔符字符串将一个[String](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String)对象分割成子字符串数组，以一个指定的分割字串来决定每个拆分的位置。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&quot;2022-12-18&quot;</span>;</span><br><span class="line">str.<span class="title function_">split</span>(<span class="string">&quot;-&quot;</span>); <span class="comment">//[&#x27;2022&#x27;,&#x27;12&#x27;,&#x27;18&#x27;]</span></span><br></pre></td></tr></table></figure>substring> **substring()** 方法返回一个字符串在开始索引到结束索引之间的一个子集，或从开始索引直到字符串的末尾的一个子集。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">substring</span>(开始的索引号[,结束的索引号])</span><br><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;今天又要做核酸了&#x27;</span></span><br><span class="line"><span class="keyword">const</span> str = <span class="string">&quot;今天又要做核酸了&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> a =str.<span class="title function_">substring</span>(<span class="number">5</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);  <span class="comment">//核酸了</span></span><br></pre></td></tr></table></figure>startsWith()> 检查字符串是否以某个字符开头<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;To be, or not to be, that is the question.&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>(str.<span class="title function_">startsWith</span>(<span class="string">&quot;To be&quot;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="title function_">alert</span>(str.<span class="title function_">startsWith</span>(<span class="string">&quot;not to be&quot;</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="title function_">alert</span>(str.<span class="title function_">startsWith</span>(<span class="string">&quot;not to be&quot;</span>, <span class="number">10</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>includes> 判断一个字符串是否包含在另一个字符串中<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&quot;To be, or not to be, that is the question.&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">includes</span>(<span class="string">&quot;To be&quot;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">includes</span>(<span class="string">&quot;question&quot;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">includes</span>(<span class="string">&quot;nonexistent&quot;</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">includes</span>(<span class="string">&quot;To be&quot;</span>, <span class="number">1</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">includes</span>(<span class="string">&quot;TO BE&quot;</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">includes</span>(<span class="string">&quot;&quot;</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>1. 实例属性 `length` 用来获取字符串的度长(重点)2. 实例方法 `split('分隔符')` 用来将字符串拆分成数组(重点)3. 实例方法 `substring（需要截取的第一个字符的索引[,结束的索引号]）` 用于字符串截取(重点)4. 实例方法 `startsWith(检测字符串[, 检测位置索引号])` 检测是否以某字符开头(重点)5. 实例方法 `includes(搜索的字符串[, 检测位置索引号])` 判断一个字符串是否包含在另一个字符串中，根据情况返回 true 或 false(重点)6. 实例方法 `toUpperCase` 用于将字母转换成大写7. 实例方法 `toLowerCase` 用于将就转换成小写8. 实例方法 `indexOf`   检测是否包含某字符9. 实例方法 `endsWith` 检测是否以某字符结尾10. 实例方法 `replace` 用于替换字符串，支持正则匹配11. 实例方法 `match` 用于查找字符串，支持正则匹配NumbertoFixed> 保留小数位的长度<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> num = <span class="number">10.923</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num.<span class="title function_">toFixed</span>(<span class="number">1</span>));</span><br><span class="line"><span class="keyword">const</span> num1 = <span class="number">10</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num.<span class="title function_">toFixed</span>(<span class="number">2</span>)); <span class="comment">//10.00</span></span><br></pre></td></tr></table></figure>###### 六、面向对象> 学习 JavaScript 中基于原型的面向对象编程序的语法实现，理解面向对象编程的特征。面向对象编程是一种程序设计思想，它具有 3 个显著的特征：封装、继承、多态。##### 6.1 封装封装的本质是将具有关联的代码组合在一起，其优势是能够保证代码复用且易于维护，函数是最典型也是最基础的代码封装形式，面向对象思想中的封装仍以函数为基础，但提供了更高级的封装形式。1. 命名空间<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="comment">// 普通对象（命名空间）形式的封装</span></span><br><span class="line">  <span class="keyword">let</span> beats = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;狼&#x27;</span>,</span><br><span class="line">    <span class="attr">setName</span>: <span class="keyword">function</span> (<span class="params">name</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">name</span> = <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">getName</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  beats.<span class="title function_">setName</span>(<span class="string">&#x27;熊&#x27;</span>);</span><br><span class="line">  beats.<span class="title function_">getName</span>();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>2. 构造函数<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="comment">// 构造函数  公共的属性和方法 封装到 Star 构造函数里面了</span></span><br><span class="line">  <span class="comment">// 1.公共的属性写到 构造函数里面</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">Star</span>(<span class="params">uname, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">uname</span> = uname</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">    <span class="comment">// this.sing = function () &#123;</span></span><br><span class="line">    <span class="comment">//   console.log(&#x27;唱歌&#x27;)</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 2. 公共的方法写到原型对象身上   节约了内存</span></span><br><span class="line">  <span class="title class_">Star</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sing</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;唱歌&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> ldh = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&#x27;刘德华&#x27;</span>, <span class="number">55</span>)</span><br><span class="line">  <span class="keyword">const</span> zxy = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&#x27;张学友&#x27;</span>, <span class="number">58</span>)</span><br><span class="line">  ldh.<span class="title function_">sing</span>() <span class="comment">//调用</span></span><br><span class="line">  zxy.<span class="title function_">sing</span>() <span class="comment">//调用</span></span><br><span class="line">  <span class="comment">// console.log(ldh === zxy)  // false</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(ldh.<span class="property">sing</span> === zxy.<span class="property">sing</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// console.dir(Star.prototype)</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>总结：1. 构造函数体现了面向对象的封装特性2. 构造函数实例创建的对象彼此独立、互不影响3. 构造函数存在浪费内存的问题4. 命名空间式的封装无法保证数据的独立性5. 原型对象- 构造函数通过原型分配的函数是所有对象所 共享的。- JavaScript 规定，每一个构造函数都有一个 prototype 属性，指向另一个对象，所以我们也称为原型对象- 这个对象可以挂载函数，对象实例化不会多次创建原型上函数，节约内存- 我们可以把那些不变的方法，直接定义在 prototype 对象上，这样所有对象的实例就可以共享这些方法<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="comment">// 自己定义 数组扩展方法  求和 和 最大值</span></span><br><span class="line">  <span class="comment">// 1. 我们定义的这个方法，任何一个数组实例对象都可以使用</span></span><br><span class="line">  <span class="comment">// 2. 自定义的方法写到  数组.prototype 身上</span></span><br><span class="line">  <span class="comment">// 1. 最大值</span></span><br><span class="line">  <span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">  <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">max</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 展开运算符</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">max</span>(...<span class="variable language_">this</span>)</span><br><span class="line">    <span class="comment">// 原型函数里面的this 指向谁？ 实例对象 arr</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 2. 最小值</span></span><br><span class="line">  <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">min</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 展开运算符</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">min</span>(...<span class="variable language_">this</span>)</span><br><span class="line">    <span class="comment">// 原型函数里面的this 指向谁？ 实例对象 arr</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">max</span>())</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>([<span class="number">2</span>, <span class="number">5</span>, <span class="number">9</span>].<span class="title function_">max</span>())</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">min</span>())</span><br><span class="line">  <span class="comment">// const arr = new Array(1, 2)</span></span><br><span class="line">  <span class="comment">// console.log(arr)</span></span><br><span class="line">  <span class="comment">// 3. 求和 方法</span></span><br><span class="line">  <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sum</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev, item</span>) =&gt;</span> prev + item, <span class="number">0</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].<span class="title function_">sum</span>())</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>([<span class="number">11</span>, <span class="number">21</span>, <span class="number">31</span>].<span class="title function_">sum</span>())</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>##### 6.2 constructor 属性> 每个原型对象里面都有个 constructor 属性（constructor 构造函数）作用该属性指向该原型对象的构造函数， 简单理解，就是指向我的爸爸，我是有爸爸的孩子![image.png](https://cdn.nlark.com/yuque/0/2022/png/29072358/1672368316725-e648ec87-3b83-425f-8e5d-802605374977.png#averageHue=%23f4f7f2&clientId=u41ea590f-f978-4&from=paste&height=143&id=ud6efc6ac&originHeight=197&originWidth=904&originalType=binary&ratio=1&rotation=0&showTitle=false&size=28222&status=done&style=none&taskId=ubd104c1c-cf84-4060-9f43-1461c5f87f8&title=&width=657.4545454545455)使用场景：如果有多个对象的方法，我们可以给原型对象采取对象形式赋值.但是这样就会覆盖构造函数原型对象原来的内容，这样修改后的原型对象 constructor 就不再指向当前构造函数了 此时，我们可以在修改后的原型对象中，添加一个 constructor 指向原来的构造函数。![image.png](https://cdn.nlark.com/yuque/0/2022/png/29072358/1672368429565-1d32a4f9-ebb0-47e8-9879-5e144f1ba028.png#averageHue=%2331353d&clientId=u41ea590f-f978-4&from=paste&height=181&id=u8cce402f&originHeight=249&originWidth=1281&originalType=binary&ratio=1&rotation=0&showTitle=false&size=101446&status=done&style=none&taskId=u877c4ddf-9d46-4a1b-984b-48bcbe0b37e&title=&width=931.6363636363636)##### 6.3 对象原型> 对象都会有一个属性 **proto** 指向构造函数的 prototype 原型对象，之所以我们对象可以使用构造函数 prototype 原型对象的属性和方法，就是因为对象有 **proto**注意：- **proto** 是 JS 非标准属性- [[prototype]]和**proto**意义相同- 用来表明当前实例对象指向哪个原型对象 prototype- **proto**对象原型里面也有一个 constructor 属性，指向创建该实例对象的构造函数![image.png](https://cdn.nlark.com/yuque/0/2022/png/29072358/1672368955363-d0f72b64-ff39-440e-abe6-5fe36ddd3ef5.png#averageHue=%23e5d5c1&clientId=u41ea590f-f978-4&from=paste&height=349&id=u90ebeaf3&originHeight=480&originWidth=931&originalType=binary&ratio=1&rotation=0&showTitle=false&size=59896&status=done&style=none&taskId=u8cb32bf5-a44f-4751-86a8-884fd4bd3bc&title=&width=677.0909090909091)##### 6.4 继承<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">eyes</span> = <span class="number">2</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">head</span> = <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// console.log(new Person)</span></span><br><span class="line">    <span class="comment">// 女人  构造函数   继承  想要 继承 Person</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">Woman</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Woman 通过原型来继承 Person</span></span><br><span class="line">    <span class="comment">// 父构造函数（父类）   子构造函数（子类）</span></span><br><span class="line">    <span class="comment">// 子类的原型 =  new 父类</span></span><br><span class="line">    <span class="title class_">Woman</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Person</span>()   <span class="comment">// &#123;eyes: 2, head: 1&#125;</span></span><br><span class="line">    <span class="comment">// 指回原来的构造函数</span></span><br><span class="line">    <span class="title class_">Woman</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Woman</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 给女人添加一个方法  生孩子</span></span><br><span class="line">    <span class="title class_">Woman</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">baby</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;宝贝&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> red = <span class="keyword">new</span> <span class="title class_">Woman</span>()</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(red)</span><br><span class="line">    <span class="comment">// console.log(Woman.prototype)</span></span><br><span class="line">    <span class="comment">// 男人 构造函数  继承  想要 继承 Person</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">Man</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 通过 原型继承 Person</span></span><br><span class="line">    <span class="title class_">Man</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line">    <span class="title class_">Man</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Man</span></span><br><span class="line">    <span class="keyword">const</span> pink = <span class="keyword">new</span> <span class="title class_">Man</span>()</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(pink)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>##### 6.5 原型链① 当访问一个对象的属性（包括方法）时，首先查找这个对象自身有没有该属性。② 如果没有就查找它的原型（也就是 **proto**指向的 prototype 原型对象）③ 如果还没有就查找原型对象的原型（Object 的原型对象）④ 依此类推一直找到 Object 为止（null）⑤ **proto**对象原型的意义就在于为对象成员查找机制提供一个方向，或者说一条路线⑥ 可以使用 instanceof 运算符用于检测构造函数 prototype 属性是否出现在某个实例对象的原型链上![image.png](https://cdn.nlark.com/yuque/0/2022/png/29072358/1672369328044-c6ee247a-4544-4644-bd99-e572c8a39a1c.png#averageHue=%23fdfdfc&clientId=u41ea590f-f978-4&from=paste&height=337&id=ud9a1830d&originHeight=464&originWidth=1020&originalType=binary&ratio=1&rotation=0&showTitle=false&size=71508&status=done&style=none&taskId=u3404bcac-909b-4d72-b7db-8dc85febd22&title=&width=741.8181818181819)##### 6.6 深浅拷贝开发中我们经常需要复制一个对象。如果直接用赋值会有下面问题：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">uname</span>: <span class="string">&#x27;pink&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> o = obj</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(o)</span><br><span class="line">  o.<span class="property">age</span> = <span class="number">20</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(o)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(obj)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>![image.png](https://cdn.nlark.com/yuque/0/2022/png/29072358/1672401586387-421887a2-168e-4bc5-8a05-b02b8a6f9183.png#averageHue=%23f7f6f4&clientId=u587dc089-073e-4&from=paste&height=244&id=u18dbc6d3&originHeight=330&originWidth=737&originalType=binary&ratio=1&rotation=0&showTitle=false&size=27131&status=done&style=none&taskId=uac71aac3-16d0-4e5a-a803-20ba27bf7e0&title=&width=544)###### 6.6.1 浅拷贝> 拷贝的是地址![image.png](https://cdn.nlark.com/yuque/0/2023/png/29072358/1675751736647-1c637686-148b-46e2-8b28-c93573bf2cad.png#averageHue=%233b4d45&clientId=u2407d8d8-36a3-4&from=paste&height=316&id=uf542cced&originHeight=395&originWidth=741&originalType=binary&ratio=1&rotation=0&showTitle=false&size=48984&status=done&style=none&taskId=uae6c97d0-b59c-42b9-9a03-ebb8538d6c5&title=&width=592.8)###### 6.6.2 深拷贝> 拷贝的是对象，不是地址常用方法通过递归实现深拷贝<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">      <span class="keyword">let</span> obj = &#123;</span><br><span class="line">        <span class="attr">uname</span>: <span class="string">&quot;wyj&quot;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">        <span class="attr">hobby</span>: [<span class="string">&quot;乒乓球&quot;</span>, <span class="string">&quot;足球&quot;</span>],</span><br><span class="line">        <span class="attr">family</span>: &#123;</span><br><span class="line">          <span class="attr">baby</span>: <span class="string">&quot;yyx&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> o = &#123;&#125;;</span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">deepCopy</span>(<span class="params">newObj, oldObj</span>) &#123;</span><br><span class="line">        <span class="comment">// 遍历旧的对象  注意:for ... in 也可以遍历数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> k <span class="keyword">in</span> oldObj) &#123;</span><br><span class="line">          <span class="comment">// 如果对象里有引用数据类型则进入判断</span></span><br><span class="line">          <span class="comment">// 处理数组问题，一定要先写数组，在写 对象</span></span><br><span class="line">          <span class="keyword">if</span> (oldObj[k] <span class="keyword">instanceof</span> <span class="title class_">Array</span>) &#123;</span><br><span class="line">            <span class="comment">// o  = &#123;hobby:[]&#125;</span></span><br><span class="line">            newObj[k] = [];</span><br><span class="line">            <span class="comment">// deepCopy([],[&quot;乒乓球&quot;, &quot;足球&quot;])</span></span><br><span class="line">            <span class="title function_">deepCopy</span>(newObj[k], oldObj[k]);</span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (oldObj[k] <span class="keyword">instanceof</span> <span class="title class_">Object</span>) &#123;</span><br><span class="line">            newObj[k] = &#123;&#125;;</span><br><span class="line">            <span class="title function_">deepCopy</span>(newObj[k], oldObj[k]);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 将旧的值赋值给新的值  相当于 o.uname = &#x27;wyj&#x27;</span></span><br><span class="line">            newObj[k] = oldObj[k];</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(newObj[k]);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="title function_">deepCopy</span>(o, obj);</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure>利用 lodash 实现深拷贝<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//先引入</span></span><br><span class="line"><span class="keyword">let</span> o = &#123;&#125;;</span><br><span class="line">o = _.<span class="title function_">cloneDeep</span>(obj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj === o); <span class="comment">//false</span></span><br></pre></td></tr></table></figure>利用 JSON 实现深拷贝<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">o = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj));</span><br><span class="line">o.<span class="property">family</span>.<span class="property">baby</span> = <span class="string">&quot;123&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o);</span><br></pre></td></tr></table></figure>##### 6.7 异常处理> 了解 JavaScript 中程序异常处理的方法，提升代码运行的健壮性。###### 6.7.1throw 抛异常异常处理是指预估代码执行过程中可能发生的错误，然后最大程度的避免错误的发生导致整个程序无法继续运行。<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">counter</span>(<span class="params">x, y</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span> (!x || !y) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// throw &#x27;参数不能为空!&#x27;;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// new Error  可以让错误更加精确</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;参数不能为空!&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> x + y;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">counter</span>();</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>总结：1. `throw` 抛出异常信息，程序也会终止执行2. `throw` 后面跟的是错误提示信息3. `Error` 对象配合 `throw` 使用，能够设置更详细的错误信息###### 6.7.2 try ...catch<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 查找 DOM 节点</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> p = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.p&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      p.<span class="property">style</span>.<span class="property">color</span> = <span class="string">&quot;red&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125; <span class="keyword">catch</span> (error) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// try 代码段中执行有错误时，会执行 catch 代码段</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 查看错误信息</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(error.<span class="property">message</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 终止代码继续执行</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125; <span class="keyword">finally</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">alert</span>(<span class="string">&quot;执行&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;如果出现错误，我的语句不会执行&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">foo</span>();</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>总结：1. `try...catch` 用于捕获错误信息2. 将预估可能发生错误的代码写在 `try` 代码段中3. 如果 `try` 代码段中出现错误后，会执行 `catch` 代码段，并截获到错误信息4. finally 在 try 语句块之后执行的语句块。无论是否有异常抛出或捕获这些语句都将执行。###### 6.7.3 debugger> 在代码中书写 debugger 相当于在控制台里打个断点##### 6.8 this 指向###### 6.8.1 普通函数 this> 谁调用 this 值就指向谁<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 普通函数</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 函数表达式</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> sayHello = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 函数的调用方式决定了 this 的值</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">sayHi</span>() <span class="comment">// window</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">window</span>.<span class="title function_">sayHi</span>()</span></span><br></pre></td></tr></table></figure>注： 普通函数没有明确调用者时 this 值为 window，严格模式下没有调用者时 this 的值为 undefined。###### 6.8.2 箭头函数 this> 箭头函数中并不存在 this ！箭头函数中访问的 this 不过是箭头函数所在作用域的 this 。在开发中【使用箭头函数前需要考虑函数中 `this` 的值】，**事件回调函数**使用箭头函数时，`this` 为全局的 `window`，因此 DOM 事件回调函数不推荐使用箭头函数，如下代码所示：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// DOM 节点</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.btn&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 箭头函数 此时 this 指向了 window</span></span></span><br><span class="line"><span class="language-javascript">  btn.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 普通函数 此时 this 指向了 DOM 对象</span></span></span><br><span class="line"><span class="language-javascript">  btn.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>同样由于箭头函数 `this` 的原因，**基于原型的面向对象也不推荐采用箭头函数**，如下代码所示：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;&#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 原型对像上添加了箭头函数</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">walk</span> = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;人都要走路...&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// window</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//原型中this 要指向 实例本身</span></span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>();</span></span><br><span class="line"><span class="language-javascript">  p1.<span class="title function_">walk</span>();</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>总结：1. 函数内不存在 this，沿用上一级的，过程：向外层作用域中，一层   一层查找 this，直到有 this 的定义2. 不适用   构造函数，原型函数，字面量对象中函数，dom 事件函数3. 适用   需要使用上层 this 的地方##### 6.9 this 改变> 以上归纳了普通函数和箭头函数中关于 this 默认值的情形，不仅如此 JavaScript 中还允许指定函数中 this 的指向，有 3 个方法可以动态指定普通函数中 this 的指向：###### 6.9.1 call() 了解> 使用 call 方法调用函数，同时指定函数中 this 的值，使用方法如下代码所示：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> obj = &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">uname</span>: <span class="string">&quot;pink&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">x, y</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// window</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(x + y);</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 1. 调用函数</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 2. 改变 this 指向</span></span></span><br><span class="line"><span class="language-javascript">  fn.<span class="title function_">call</span>(obj, <span class="number">1</span>, <span class="number">2</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>总结：1. `call` 方法能够在调用函数的同时指定 `this` 的值2. 使用 `call` 方法调用函数时，第 1 个参数为 `this` 指定的值3. `call` 方法的其余参数会依次自动传入函数做为函数的参数###### 6.9.2 apply()> 使用 call 方法调用函数，同时指定函数中 this 的值，使用方法如下代码所示：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> obj = &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">age</span>: <span class="number">18</span>,</span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">x, y</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">//&#123;age: 18&#125;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(x + y);</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 1.调用函数</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 2.改变this指向</span></span></span><br><span class="line"><span class="language-javascript">  fn.<span class="title function_">apply</span>(obj, [<span class="number">1</span>, <span class="number">2</span>]);</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 3.返回值  本身就是在调用函数，所以返回值就是函数的返回值</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 使用场景： 求数组最大值</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> arr = [<span class="number">100</span>, <span class="number">44</span>, <span class="number">77</span>];</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> max = <span class="title class_">Math</span>.<span class="property">max</span>.<span class="title function_">apply</span>(<span class="title class_">Math</span>, arr);</span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">Math</span>.<span class="title function_">max</span>(...arr);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>总结：1. `apply` 方法能够在调用函数的同时指定 `this` 的值2. 使用 `apply` 方法调用函数时，第 1 个参数为 `this` 指定的值3. `apply` 方法第 2 个参数为数组，数组的单元值依次自动传入函数做为函数的参数###### 6.9.3 bind() 重点> bind 方法并不会调用函数，而是创建一个指定了 this 值的新函数，使用方法如下代码所示：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> obj = &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">age</span>: <span class="number">18</span>,</span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 1. bind 不会调用函数</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 2. 能改变this指向</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 3. 返回值是个函数， 但是这个函数里面的this是更改过的指向obj</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> fun = fn.<span class="title function_">bind</span>(obj); <span class="comment">//返回函数</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>场景：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="comment">// 需求，有一个按钮，点击里面就禁用，2秒钟之后开启</span></span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 禁用按钮</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">disabled</span> = <span class="literal">true</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// 在这个普通函数里面，我们要this由原来的window 改为 btn</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">disabled</span> = <span class="literal">false</span></span><br><span class="line">    &#125;.<span class="title function_">bind</span>(<span class="variable language_">this</span>), <span class="number">2000</span>)   <span class="comment">// 这里的this 和 btn 一样</span></span><br><span class="line">  &#125;)</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure>总结:1.          bind 不会调用函数2.          能改变this指向3.          返回值是个函数， 但是这个函数里面的this是更改过的指向obj###### 6.9.4 call() apply() bind() 总结相同点:都可以改变函数内部的 this 指向.区别点:1. call 和 apply 会调用函数, 并且改变函数内部 this 指向.2. call 和 apply 传递的参数不一样, call 传递参数 aru1, aru2..形式 apply 必须数组形式[arg]3. bind 不会调用函数, 可以改变函数内部 this 指向.主要应用场景:- call 调用函数并且可以传递参数- apply 经常跟数组有关系. 比如借助于数学对象实现数组最大值最小值- bind 不调用函数,但是还想改变 this 指向. 比如改变定时器内部的 this 指向.### 七、防抖节流##### 7.1 节流> 连续触发事件，但是在规定时间内只执行一次函数（英雄技能冷却）<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">      .<span class="property">box</span> &#123;</span><br><span class="line">        <span class="attr">width</span>: 500px;</span><br><span class="line">        <span class="attr">height</span>: 500px;</span><br><span class="line">        background-<span class="attr">color</span>: #ccc;</span><br><span class="line">        <span class="attr">color</span>: #fff;</span><br><span class="line">        text-<span class="attr">align</span>: center;</span><br><span class="line">        font-<span class="attr">size</span>: 100px;</span><br><span class="line">      &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">let</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.box&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">let</span> i = <span class="number">1</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">function</span> <span class="title function_">mouseMove</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        box.<span class="property">innerHTML</span> = i++;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 如果存在大量操作 dom 的情况，可能卡顿</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 节流函数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">fn, t</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">let</span> startTime = <span class="number">0</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">let</span> now = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">if</span> (now - startTime &gt;= t) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">fn</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            startTime = now;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 当点击事件使用函数调用，当页面打开会立即调用。且不会再次调用执行，return就可以多次执行。这里存在闭包</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      box.<span class="title function_">addEventListener</span>(<span class="string">&quot;mousemove&quot;</span>, <span class="title function_">throttle</span>(mouseMove, <span class="number">1000</span>));</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>##### 7.2 防抖> 所谓防抖，就是指触发事件后在 n 秒内函数只能执行一次，如果在 n 秒内又触发了事件，则会重新计算函数执行时间 （英雄回城）使用场景：输入框，只有输入完在查找<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    .<span class="property">box</span> &#123;</span><br><span class="line">      <span class="attr">width</span>: 500px;</span><br><span class="line">      <span class="attr">height</span>: 500px;</span><br><span class="line">      background-<span class="attr">color</span>: #ccc;</span><br><span class="line">      <span class="attr">color</span>: #fff;</span><br><span class="line">      text-<span class="attr">align</span>: center;</span><br><span class="line">      font-<span class="attr">size</span>: 100px;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">let</span> i = <span class="number">1</span>  <span class="comment">// 让这个变量++</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 鼠标移动函数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">function</span> <span class="title function_">mouseMove</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      box.<span class="property">innerHTML</span> = ++i</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 如果里面存在大量操作 dom 的情况，可能会卡顿</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 防抖函数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">fn, t</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">let</span> timeId</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 如果有定时器就清除</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">if</span> (timeId) <span class="built_in">clearTimeout</span>(timeId)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 开启定时器 200</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        timeId = <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="title function_">fn</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;, t)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// box.addEventListener(&#x27;mousemove&#x27;, mouseMove)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    box.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>, <span class="title function_">debounce</span>(mouseMove, <span class="number">200</span>))</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>Lodash 节流和防抖<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">const</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>) <span class="keyword">let</span> i = <span class="number">1</span> <span class="comment">// 让这个变量++ //</span></span><br><span class="line">  鼠标移动函数 <span class="keyword">function</span> <span class="title function_">mouseMove</span>(<span class="params"></span>)&#123;<span class="string">&quot; &quot;</span>&#125;</span><br><span class="line">  &#123;</span><br><span class="line">    (box.<span class="property">innerHTML</span> = ++i)</span><br><span class="line">    <span class="comment">// 如果里面存在大量操作 dom 的情况，可能会卡顿</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// box.addEventListener(&#x27;mousemove&#x27;, mouseMove) // lodash 节流写法 // box.addEventListener(&#x27;mousemove&#x27;,</span></span><br><span class="line">  _.<span class="title function_">throttle</span>(mouseMove, <span class="number">500</span>)) <span class="comment">// lodash 防抖的写法 box.addEventListener(&#x27;mousemove&#x27;,</span></span><br><span class="line">  _.<span class="title function_">debounce</span>(mouseMove, <span class="number">500</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></script>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dom </tag>
            
            <tag> Bom </tag>
            
            <tag> Es </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTMl以及CSS</title>
      <link href="/2023/09/09/HTMl%E4%BB%A5%E5%8F%8ACSS/"/>
      <url>/2023/09/09/HTMl%E4%BB%A5%E5%8F%8ACSS/</url>
      
        <content type="html"><![CDATA[<p>twfasdfasdfasdfasdfd<br>fa<br>sdf<br>as<br>df<br>asd<br>f<br>asdf</p><p>sd<br>fas<br>df<br>as<br>df</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>博客的搭建</title>
      <link href="/2023/09/08/%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/"/>
      <url>/2023/09/08/%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="一、前置工具准备"><a href="#一、前置工具准备" class="headerlink" title="一、前置工具准备"></a>一、前置工具准备</h1><blockquote><p>因为要部署到 gihthub 上，我们需要准备 node.js 包管理工具，以及 git 将代码推到 github 进行管理</p></blockquote><h2 id="1-安装-git"><a href="#1-安装-git" class="headerlink" title="1. 安装 git"></a>1. 安装 git</h2><p><a href="https://git-scm.com/download/win">git</a>进入网站下载</p><img src="/2023/09/08/%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/image-20230909163309097.png" alt="image-20230909163309097" style="zoom:50%;"><p>然后傻瓜式安装。</p><h2 id="2-安装-node"><a href="#2-安装-node" class="headerlink" title="2.安装 node"></a>2.安装 node</h2><p><a href="https://nodejs.cn/download/">node.js</a>进入网站下载</p><img src="/2023/09/08/%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/image-20230909163644502.png" alt="image-20230909163644502" style="zoom: 33%;"><p>添加国内镜像源（因为 node.js 包是在外网，没有梯子可以更改国内镜像）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry <span class="attr">https</span>:<span class="comment">//registry.npm.taobao.org</span></span><br></pre></td></tr></table></figure><h1 id="二、搭建流程"><a href="#二、搭建流程" class="headerlink" title="二、搭建流程"></a>二、搭建流程</h1><h2 id="1-安装-HEXO"><a href="#1-安装-HEXO" class="headerlink" title="1. 安装 HEXO"></a>1. 安装 HEXO</h2><ul><li>以管理员身份运行 CMD （注意）❤️</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli   # -g表示全局安装</span><br><span class="line">输入hexo -v 验证是否安装完成</span><br></pre></td></tr></table></figure><h2 id="2-搭建本地博客"><a href="#2-搭建本地博客" class="headerlink" title="2.搭建本地博客"></a>2.搭建本地博客</h2><ul><li>安装博客你需要进入你指定的文件夹,打开 git 命令窗口</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init <span class="string">&quot;blog&quot;</span> <span class="comment">//“创建的文件名”</span></span><br></pre></td></tr></table></figure><ul><li>安装相关依赖</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install 或 npm i</span><br></pre></td></tr></table></figure><img src="/2023/09/08/%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/image-20230909172815035.png" alt="image-20230909172815035" style="zoom: 67%;"><p><img src="/2023/09/08/%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/image-20230909173338367.png" alt="image-20230909173338367"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo g 生成页面</span><br><span class="line">hexo s 打开本地服务器</span><br><span class="line">ctrl + c 关闭服务器</span><br></pre></td></tr></table></figure><p><img src="/2023/09/08/%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/image-20230909173452595.png" alt="image-20230909173452595"></p><h2 id="3-github-操作"><a href="#3-github-操作" class="headerlink" title="3.github 操作"></a>3.github 操作</h2><ul><li>注册 github(自己创建)</li><li>在本地电脑生成一个密钥并在 github 上添加密钥</li><li>在 github 上生成一个仓库</li><li>将 hexo 部署到 github</li></ul><h3 id="3-1-在本地电脑生成一个密钥并在-github-上添加密钥"><a href="#3-1-在本地电脑生成一个密钥并在-github-上添加密钥" class="headerlink" title="3.1 在本地电脑生成一个密钥并在 github 上添加密钥"></a>3.1 在本地电脑生成一个密钥并在 github 上添加密钥</h3><ul><li><p>在 git 命令窗口，创建你的名字和你的邮箱</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name  wangcai  【和你注册github时的账号一样】</span><br><span class="line">git config --global user.email xxx@qq.com    【和你注册github时的邮箱一样】</span><br></pre></td></tr></table></figure></li><li><p>检测有没有输入成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config user.name</span><br><span class="line">git config user.email</span><br></pre></td></tr></table></figure></li><li><p>在本地电脑生成密钥</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;717628672@qq.com&quot;</span>    #邮箱换成你的邮箱</span><br></pre></td></tr></table></figure></li></ul><img src="/2023/09/08/%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/image-20230909175531936.png" alt="image-20230909175531936" style="zoom: 33%;"><p>秘钥的生成位置，如下：</p><p><img src="/2023/09/08/%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/image-20230909175603133.png" alt="image-20230909175603133"></p><p>把公钥 copy 到 github 上，找到公钥，如下 ：</p><p><img src="/2023/09/08/%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/image-20230909175655560.png" alt="image-20230909175655560"></p><p><img src="/2023/09/08/%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/image-20230909175716625.png" alt="image-20230909175716625"></p><p><img src="/2023/09/08/%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/image-20230909175841193.png" alt="image-20230909175841193"></p><p><img src="/2023/09/08/%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/image-20230909175905901.png" alt="image-20230909175905901"></p><p><img src="/2023/09/08/%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/image-20230909175927303.png" alt="image-20230909175927303"></p><ul><li>在<code>git bash</code>输入<code>ssh -T git@github.com</code>，如果如下图所示，出现你的用户名，那就成功了。</li></ul><h3 id="3-2-在-github-上生成一个仓库"><a href="#3-2-在-github-上生成一个仓库" class="headerlink" title="3.2 在 github 上生成一个仓库"></a>3.2 在 github 上生成一个仓库</h3><p><img src="/2023/09/08/%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/image-20230909180106505.png" alt="image-20230909180106505"></p><p><img src="/2023/09/08/%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/image-20230909181452651.png" alt="image-20230909181452651"></p><ul><li>然后就可以拉到页面下方点击确认了，我们复制 ssh 链接，配置文件时需要用到，如果丢了在仓库里也可以查看</li></ul><p><img src="/2023/09/08/%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/image-20230909183301840.png" alt="image-20230909183301840"></p><p><img src="/2023/09/08/%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/image-20230909183553197.png" alt="image-20230909183553197"></p><h3 id="3-3-将-hexo-部署到-github"><a href="#3-3-将-hexo-部署到-github" class="headerlink" title="3.3 将 hexo 部署到 github"></a>3.3 将 hexo 部署到 github</h3><ul><li>打开博客的根目录下的<code>_config.yml</code>文件在这里你可以修改与博客配置相关的各种信息。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy</span>:</span><br><span class="line">  <span class="attr">type</span>: git</span><br><span class="line">  <span class="attr">repository</span>: git@github.<span class="property">com</span>:<span class="title class_">StartAfresh</span>/<span class="title class_">StartAfresh</span>.<span class="property">github</span>.<span class="property">io</span>.<span class="property">git</span>  <span class="comment">//</span></span><br><span class="line">  <span class="attr">branch</span>: master</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># <span class="variable constant_">URL</span></span><br><span class="line">## <span class="title class_">Set</span> your site url here. <span class="title class_">For</span> example, <span class="keyword">if</span> you use <span class="title class_">GitHub</span> <span class="title class_">Page</span>, set url <span class="keyword">as</span> <span class="string">&#x27;https://username.github.io/project&#x27;</span></span><br><span class="line"><span class="attr">url</span>: <span class="attr">https</span>:<span class="comment">//StartAfresh.github.io/</span></span><br></pre></td></tr></table></figure><p><code>repository</code>修改为你自己的<code>github</code>项目地址即可就是部署时，告诉工具，将生成网页通过<code>git</code>方式上传到你对应的链接仓库中。</p><p>这个时候需要先安装<code>deploy-git</code> ，也就是部署的命令,这样你才能用命令部署到<code>GitHub</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><ul><li>下一步</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo c    <span class="comment">//清除缓存</span></span><br><span class="line">hexo generate<span class="comment">//生成静态页面</span></span><br><span class="line">hexo d<span class="comment">//将博客推上github</span></span><br><span class="line">注意：d时可能要你输入username和password。</span><br></pre></td></tr></table></figure><p><img src="/2023/09/08/%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/image-20230909182902860.png" alt="image-20230909182902860"></p><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><blockquote><p>hexo + Typora 图片上传问题</p></blockquote><h2 id="1-hexo-Typora-图片上传问题"><a href="#1-hexo-Typora-图片上传问题" class="headerlink" title="1. hexo + Typora 图片上传问题"></a>1. hexo + Typora 图片上传问题</h2><p><strong>解决步骤：</strong></p><ol><li>修改 typora 图片放置的位置。当自己新建一个文章时，添加图片自动创建存放图片的文件（文件夹的名字与文章笔记相同）</li></ol><p><img src="/2023/09/08/%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/image-20230909154108020.png" alt="image-20230909154108020"></p><ol start="2"><li>修改博客根目录下的站点配置（_config.yml）文件中的 post_asset_folder 字段设置为 true<ul><li>当设置 post_asset_folder 参数后，在<strong>hexo n</strong>命令建立文件时， 会自动建立一个与文章同名的文件夹，把与该文章相关的所有图片资源都放到此文件夹内，这样就可以方便的使用图片资源</li><li>同时，只有当 post_asset_folder 设置为 true 后，后续安装的插件才会起作用</li></ul></li></ol><p>​ <img src="/2023/09/08/%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/image-20230909154528792.png" alt="image-20230909154528792"></p><ol start="3"><li><p>安装插件</p><ul><li><p>到根目录下 npm install <a href="https://link.jianshu.com/?t=https://github.com/CodeFalling/hexo-asset-image">https://github.com/CodeFalling/hexo-asset-image</a> –save 命令来进行插件的安装</p></li><li><p>当文章全部写完后，使用 Typora 的替换功能（替换功能包含删除功能，当替换的内容什么都不输入时为全部删除）将所有图片地址前面多余的部分删除即可</p></li></ul><p><img src="/2023/09/08/%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/image-20230909160456443.png" alt="image-20230909160456443"></p></li></ol><h2 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h2>]]></content>
      
      
      <categories>
          
          <category> hexo维护 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Github </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
